syntax = "proto3";

option java_multiple_files = true;
// 生成Java类的包,对于其他语言通过.proto文件生成代码是不起任何作用
option java_package = "com.alibaba.csp.sentinel.adapter.grpc.gen";
option java_outer_classname = "FooProto";

package com.alibaba.sentinel.examples;

// .proto 文件也包含了所有请求的 protocol buffer 消息类型定义以及在服务方法中使用的响应类型
message FooRequest {
  string name = 1;
  int32 id = 2;
}

message FooResponse {
  string message = 1;
}

/*
gRPC 允许你定义四类服务方法：
单项RPC：即客户端发送一个请求给服务端，从服务端获取一个应答，就像一次普通的函数调用。
    rpc SayHello(HelloRequest) returns (HelloResponse){}
服务端流式RPC：即客户端发送一个请求给服务端，可获取一个数据流用来读取一系列消息。客户端从返回的数据流里一直读取直到没有更多消息为止。
    rpc LotsOfReplies(HelloRequest) returns (stream HelloResponse){}
客户端流式RPC：即客户端用提供的一个数据流写入并发送一系列消息给服务端。一旦客户端完成消息写入，就等待服务端读取这些消息并返回应答。
    rpc LotsOfGreetings(stream HelloRequest) returns (HelloResponse){}
双向流式RPC：即两边都可以分别通过一个读写数据流来发送一系列消息。这两个数据流操作是相互独立的，所以客户端和服务端能按其希望的任意顺序读写，
    例如：服务端可以在写应答前等待所有的客户端消息，或者它可以先读一个消息再写一个消息，或者是读写相结合的其他方式。每个数据流里消息的顺序会被保持。
    rpc BidiHello(stream HelloRequest) returns (stream HelloResponse){}
*/
/*
使用 API 接口
gRPC 提供 protocol buffer 编译插件，能够从一个服务定义的 .proto 文件生成客户端和服务端代码。通常 gRPC 用户可以在服务端实现这些API，并从客户端调用它们。
    在服务侧，服务端实现服务接口，运行一个 gRPC 服务器来处理客户端调用。gRPC 底层架构会解码传入的请求，执行服务方法，编码服务应答。
    在客户侧，客户端有一个存根实现了服务端同样的方法。客户端可以在本地存根调用这些方法，用合适的 protocol buffer 消息类型封装这些参数—
        gRPC 来负责发送请求给服务端并返回服务端 protocol buffer 响应。
 */
/*
同步 vs 异步
同步 RPC 调用一直会阻塞直到从服务端获得一个应答，这与 RPC 希望的抽象最为接近。
另一方面网络内部是异步的，并且在许多场景下能够在不阻塞当前线程的情况下启动 RPC 是非常有用的。
 */
// 必须在.proto文件定义一个服务,然后在服务中定义rpc方法,指定它们的请求和响应类型
service FooService {
  rpc sayHello(FooRequest) returns (FooResponse) {}
  rpc anotherHello(FooRequest) returns (FooResponse) {}
}
